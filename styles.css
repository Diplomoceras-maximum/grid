/* === CSS Grid === */

/*

    === What is grid? ===

    1. Grid is often used for easier placement of items in a two-dimensional layout (rows and columns)
    2. Grid is much better at matching items evenly in size
    3. Grid can be paired with flexbox, flexboxs can be placed inside grids and the opposite is also true
    4. The difference with flexbox is that instead of wrapping elements onto a new row, grid works in rows and columns and they can be added and removed when needed

*/

/*

    === Setting up a grid  ===

    1. Grid Container

        a. CSS grid can be thought of in terms of a container and items
        b. When an element is made a grid, it will contain the whole grid
        c. To make an element a grid container, you use the display: grid or display: inline-grid properties

        Example:

        .container {
            display: grid;
        }

        d. All child elements under a grid parent become grid items (only direct child elements)
        e. Child elements can also be grid containers, so grids can be inside of grids, inside of grids


    2. Columns and Rows

        a. Columns and rows define the grid track (the space between lines on a grid)
        b. grid-template-columns and grid-template-rows properties are used to define the columns and rows

        Example:

        .container {
            display: grid;
            grid-template-columns: 50px 50px;
            grid-template-rows: 50px 50px;
        }

        c. This example creates 2 rows 50px wide and 2 columns 50px tall (a 2x2 grid of 50 x 50 pixels)
        d. Columns are rows do not have to have the same values
        e. The rows and columns have a shorthand using the grid-template property, seperated using a forward slash (rows before slash and columns after)

        Example:

        .container {
            display: grid;
            grid-template: 50px 50px / 50px 50px 50px;


*/

.container {
  display: grid;
  grid-template-columns: 150px 150px;
  grid-template-rows: 50px 50px;
}

.item {
  border: 1px solid black;
  display: flex;
  align-items: center;
  justify-content: center;
}

/*

    === Explicit vs implicit grid ===

    Example:

    <div class="container">
        <div>Item 1</div>
        <div>Item 2</div>
        <div>Item 3</div>
        <div>Item 4</div>
        <div>Item 5</div>
    </div>

    .container {
        display: grid;
        grid-template-columns: 50px 50px;
        grid-template-rows: 50px 50px;
    }

    1. This example only defines two rows but the 5th item is placed on a third row
    2. The grid does this becuase of the implicit grid concept and how its capable of automatically placing items when not explicitly defined in the layout
    3. grid-template-rows and grid-template-columns properties explicity define grid tracks, but when more tracks are needed, it will implicitly define new ones
    4. The size values from the explicitly defined properties are not carried over into the implicit ones, but they can be defined seperately
    5. Implicit grid tracks can be defined using the grid-auto-rows and grid-auto-columns properties

    Example:

    .container {
        display: grid;
        grid-template-columns: 50px 50px;
        grid-template-rows: 50px 50px;
        grid-auto-rows: 50px;
    }

    6. By default, grid will add additional content with implicit rows, as it is much less common for content to be added horizontally
    7. Horizontal auto flow can be added with the grid-auto-flow: column property

*/

.container-two {
  display: grid;
  grid-template-columns: 150px 150px;
  grid-template-rows: 50px 50px;
  grid-auto-rows: 50px;
}

/*

    === Gap ===

    1. The gap between grid rows and columns is known as the gutter or alley
    2. Gap sizes can be adjusted seperately for rows and columns using the column-gap and row-gap properties
    3. A shorthand propert of gap sets both row and column gap sizes

    Example:

    .container {
        display: grid;
        grid-template-columns: 50px 50px;
        grid-template-rows: 50px 50px;
        column-gap: 10px;
    }

*/

.container-three {
  display: grid;
  grid-template-columns: 150px 150px;
  grid-template-rows: 50px 50px;
  gap: 20px;
}

/*

    === Positioning ===

    1. The grid-column-start and grid-column-end properties represent the column grid lines the element should start and end with
    2. Similarly grid-row-start and grid-row-end properties represent the row grid line the element should start and end with
    3. The properties grid-column and grid-row are the shorthand versions of the prior properties

    Example:

    <div class="container">
        <div class="room" id="living-room">Living Room</div>
        <div class="room" id="kitchen">Kitchen</div>
        <div class="room" id="bedroom">Bedroom</div>
        <div class="room" id="bathroom">Bathroom</div>
        <div class="room" id="closet">Closet</div>
    </div>

    .container {
        display: inline-grid;
        grid-template: 40px 40px 40px 40px 40px / 40px 40px 40px 40px 40px;
        background-color: lightblue; 
    }

    .room {
        border: 1px solid;
        font-size: 50%;
        text-align: center;
    }

    #living-room {
        grid-column-start: 1;
        grid-column-end: 6;
        grid-row-start: 1;
        grid-row-end: 3;
    }

    #kitchen {
        grid-column: 4 / 6;
        grid-row: 3 / 6;
    }

    #bedroom {
        grid-column-start: 2;
        grid-column-end: 4;
        grid-row-start: 3;
        grid-row-end: 5;
    }

    #bathroom {
        grid-column-start: 1;
        grid-column-end: 2;
        grid-row-start: 3;
        grid-row-end: 6;
    }

    #closet {
        grid-column-start: 2;
        grid-column-end: 4;
        grid-row-start: 5;
        grid-row-end: 6;
    }


*/

.container-four {
  display: grid;
  grid-template: 40px 40px 40px 40px 40px / 40px 40px 40px 40px 40px;
}

.room {
  display: flex;
  border: 1px solid;
  align-items: center;
  justify-content: center;
  text-align: center;
}

.one {
  grid-column-start: 1;
  grid-column-end: 6;
  grid-row-start: 1;
  grid-row-end: 3;
}

.two {
  grid-column: 4 / 6;
  grid-row: 3 / 6;
}

.three {
  grid-column-start: 2;
  grid-column-end: 4;
  grid-row-start: 3;
  grid-row-end: 5;
}

.four {
  grid-column-start: 1;
  grid-column-end: 2;
  grid-row-start: 3;
  grid-row-end: 6;
}

.five {
  grid-column-start: 2;
  grid-column-end: 4;
  grid-row-start: 5;
  grid-row-end: 6;
}

/*

    === Grid-area ===

    1. grid-area can be used as a sorthand for grid-row-start / grid-column-start / grid-row-end / grid-column-end into one line

    Example:

    #living-room {
        grid-area: 1 / 1 / 3 / 6;
    }

    2. Alternatively, grid-area can be used to position things visually using words, using grid-area as the property with a name value
    3. Then with each grid item having a grid-area value, you can map the structure on the container using the grid-template-areas property

    Example:

    .container {
        display: inline-grid;
        grid-template: 40px 40px 40px 40px 40px / 40px 40px 40px 40px 40px;
        background-color: lightblue; 
        grid-template-areas:
            "living-room living-room living-room living-room living-room"
            "living-room living-room living-room living-room living-room"
            "bedroom bedroom bathroom kitchen kitchen"
            "bedroom bedroom bathroom kitchen kitchen"
            "closet closet bathroom kitchen kitchen"    
    }

    .room {
        border: 1px solid;
        font-size: 50%;
        text-align: center;
    }

    #living-room {
        grid-area:  living-room;
    }

    #kitchen {
        grid-area: kitchen;
    }

    #bedroom {
        grid-area: bedroom;
    }

    #bathroom {
        grid-area: bathroom;
    }

    #closet {
        grid-area: closet;
    }

    4. To indicate empty cells you can use "." instead of a grid-area value

*/

.container-five {
  display: grid;
  grid-template: 40px 40px 40px 40px 40px / 40px 40px 40px 40px 40px;
  grid-template-areas:
    "living-room living-room living-room living-room living-room"
    "living-room living-room living-room living-room living-room"
    "bedroom bedroom bathroom kitchen kitchen"
    "bedroom bedroom bathroom kitchen kitchen"
    "closet closet bathroom kitchen kitchen";
}

.box {
  display: flex;
  border: 1px solid;
  align-items: center;
  justify-content: center;
  text-align: center;
}

#one {
  grid-area: living-room;
}

#two {
  grid-area: bedroom;
}

#three {
  grid-area: closet;
}

#four {
  grid-area: bathroom;
}

#five {
  grid-area: kitchen;
}

/* === Advanced Grid Properties === */

/*

  === repeat() property ===

  1. repeat() is a CSS function used to define a number of rows or columns without having to manually type out each track individually

  Example:

  .container {
    grid-template-rows: repeat(2, 150px);
    grid-template-columns: repeat(5, 150px);
  }

  This example creates 2 rows each 150px wide and 5 columns each 150px tall


*/

/*

  === Fractional units ===

  1. Fractional units are used to make grid tracks dynamic (responsive)
  2. fr (fractional units) work by distributing space left in the grid, for example if the grid is 400px wide and there are 4 items each with 1fr as their size, they will each take up 100px of the grid
  3. fr units grow and shrink proportionately to the size of the element making them responsive

  Example:

  .container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(2, 1fr);
  }

*/

.container-six {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(2, 1fr);
}

.object {
  border: 1px solid black;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 1rem;
}

/*

  === Minimum and maximum track sizes ===

  1. The min() and max() CSS functions can be used to explicitly decide how small or large the content should be

  Example:

  .grid-container {
    grid-template-rows: repeat(2, min(200px, 50%));
    grid-template-columns: repeat(5, max(120px, 15%));
  }

  In this example the browser will compare both values for grid row size and apply whichever is the smallest. Therefore the grid track size should be 50% of the grids total vertical space, unless that number exceeds 200px, essentially setting a max-height for the track

  Similarly, the grid column size will be calcualted based on the larger of the two values, which essentially sets a minimum width for the grid columns at 120px

*/

.min-max-fs {
  height: 420px;
}

.container-seven {
  display: grid;
  grid-template-rows: repeat(2, min(200px, 50%));
  grid-template-columns: repeat(5, max(120px, 15%));
  resize: both;
  overflow: auto;
  border: 1px solid gray;
}

/*

  === Dynamic minimum and maximum sizes ===

  1. minmax()

    a. minmax() is a CSS function that is designed for grid, it only works with grid-template-columns/rows and grid-auto-columns/rows
    b. minmax() takes two arguments, the minimum size the grid track can be, and the maximum size the grid track can be
    
    Example:

    .grid-container {
      grid-template-rows: repeat(2, 1fr);
      grid-template-columns: repeat(5, minmax(150px, 200px));
    }

    In this example, the columns with grow and shrink when the grid container is resized horizontally

    The column tracks will stop shrinking at 150px and will stop growing at 200px

*/

.container-eight {
  display: grid;
  grid-template-rows: repeat(2, 1fr);
  grid-template-columns: repeat(5, minmax(150px, 200px));
  resize: horizontal;
  overflow: auto;
  border: 1px solid gray;
}

/*

    2. clamp()

      a. clamp() function can be used anywhere but also works with grid, clamp functions as so clamp(minimum-size, ideal-size, maximum-size)
      b. Dynamic sizes should be used for the ideal size, while static sizes can be used for minimum and maximum

      Example:

      .grid-container {
        grid-template-columns: repeat(5, clamp(150px, 20%, 200px));
      }

      In this example, the column tracks will stay at 20% width of the container until they hit the minimum or maximum thresholds

*/

.container-nine {
  display: grid;
  grid-template-rows: repeat(2, 1fr);
  grid-template-columns: repeat(5, clamp(150px, 20%, 200px));
  resize: horizontal;
  overflow: auto;
  border: 1px solid gray;
}

/*

  === Auto-fit and Auto-fill ===

  1. auto-fit and auto-fill are a part of the repeat() function
  2. These values are used to give a grid a number of columns tha tis flexible based on the size of the grid, for example 2 columns for a 400px grid but when shrunk down it becomes 1 column
  3. Both values will return the largest possible integer without the grid items overflowing their container

  Example:

  .example {
    display: grid;
    width: 1000px;
    grid-template-columns: repeat(auto-fit, 200px);
  }

  In this example at 1000px width the grid will have 5 columns each 200px wide

  4. auto-fit and auto-fill can be incorporated with minmax()
  5. With minmax() the grid can be explicity told to have as many columns as possible using the constraints of the minmax() function to determine each columns size, without it overflowing the grid

  Example:

  .grid-container {
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  }

  In this example the autofit will return the highest positive integer wihtout overlowing the grid
  Therefore:
  a. The browser first checks how wide the grid is
  b. Next the browser needs to know how man grid column tracks could fit in that width (uses the minimum value in the minmax() function = 150px)
  c. The browser renders the columns, once the browser has determined how many can fit, the columns are resized to the maximum value of the minmax() function which is 1fr

*/

.container-ten {
  display: grid;
  grid-template-rows: repeat(2, 1fr);
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  resize: horizontal;
  overflow: auto;
  border: 1px solid gray;
}

/*

  6. auto-fill works mostly the same as auto-fit, the difference is only noticeable when there are fewer items than can fill up the entirety of the grid row once
  7. When the grid is expanded to a size where another grid item could fit but there are none, auto-fit will keep items at their max size
  8. When using auto-fill, the grid items will snap back down to their min size once the space becomes available to add another grid item, eben if there isnt one, this process will continue

*/

.container-eleven {
  display: grid;
  grid-template-rows: repeat(2, 1fr);
  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
  resize: horizontal;
  overflow: auto;
  border: 1px solid gray;
}
