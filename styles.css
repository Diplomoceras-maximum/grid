/* === CSS Grid === */

/*

    === What is grid? ===

    1. Grid is often used for easier placement of items in a two-dimensional layout (rows and columns)
    2. Grid is much better at matching items evenly in size
    3. Grid can be paired with flexbox, flexboxs can be placed inside grids and the opposite is also true
    4. The difference with flexbox is that instead of wrapping elements onto a new row, grid works in rows and columns and they can be added and removed when needed

*/

/*

    === Setting up a grid  ===

    1. Grid Container

        a. CSS grid can be thought of in terms of a container and items
        b. When an element is made a grid, it will contain the whole grid
        c. To make an element a grid container, you use the display: grid or display: inline-grid properties

        Example:

        .container {
            display: grid;
        }

        d. All child elements under a grid parent become grid items (only direct child elements)
        e. Child elements can also be grid containers, so grids can be inside of grids, inside of grids


    2. Columns and Rows

        a. Columns and rows define the grid track (the space between lines on a grid)
        b. grid-template-columns and grid-template-rows properties are used to define the columns and rows

        Example:

        .container {
            display: grid;
            grid-template-columns: 50px 50px;
            grid-template-rows: 50px 50px;
        }

        c. This example creates 2 rows 50px wide and 2 columns 50px tall (a 2x2 grid of 50 x 50 pixels)
        d. Columns are rows do not have to have the same values
        e. The rows and columns have a shorthand using the grid-template property, seperated using a forward slash (rows before slash and columns after)

        Example:

        .container {
            display: grid;
            grid-template: 50px 50px / 50px 50px 50px;


*/

.container {
  display: grid;
  grid-template-columns: 150px 150px;
  grid-template-rows: 50px 50px;
}

.item {
  border: 1px solid black;
  display: flex;
  align-items: center;
  justify-content: center;
}

/*

    === Explicit vs implicit grid ===

    Example:

    <div class="container">
        <div>Item 1</div>
        <div>Item 2</div>
        <div>Item 3</div>
        <div>Item 4</div>
        <div>Item 5</div>
    </div>

    .container {
        display: grid;
        grid-template-columns: 50px 50px;
        grid-template-rows: 50px 50px;
    }

    1. This example only defines two rows but the 5th item is placed on a third row
    2. The grid does this becuase of the implicit grid concept and how its capable of automatically placing items when not explicitly defined in the layout
    3. grid-template-rows and grid-template-columns properties explicity define grid tracks, but when more tracks are needed, it will implicitly define new ones
    4. The size values from the explicitly defined properties are not carried over into the implicit ones, but they can be defined seperately
    5. Implicit grid tracks can be defined using the grid-auto-rows and grid-auto-columns properties

    Example:

    .container {
        display: grid;
        grid-template-columns: 50px 50px;
        grid-template-rows: 50px 50px;
        grid-auto-rows: 50px;
    }

    6. By default, grid will add additional content with implicit rows, as it is much less common for content to be added horizontally
    7. Horizontal auto flow can be added with the grid-auto-flow: column property

*/

.container-two {
  display: grid;
  grid-template-columns: 150px 150px;
  grid-template-rows: 50px 50px;
  grid-auto-rows: 50px;
}

/*

    === Gap ===

    1. The gap between grid rows and columns is known as the gutter or alley
    2. Gap sizes can be adjusted seperately for rows and columns using the column-gap and row-gap properties
    3. A shorthand propert of gap sets both row and column gap sizes

    Example:

    .container {
        display: grid;
        grid-template-columns: 50px 50px;
        grid-template-rows: 50px 50px;
        column-gap: 10px;
    }

*/

.container-three {
  display: grid;
  grid-template-columns: 150px 150px;
  grid-template-rows: 50px 50px;
  gap: 20px;
}

/*

    === Positioning ===

    1. The grid-column-start and grid-column-end properties represent the column grid lines the element should start and end with
    2. Similarly grid-row-start and grid-row-end properties represent the row grid line the element should start and end with
    3. The properties grid-column and grid-row are the shorthand versions of the prior properties

    Example:

    <div class="container">
        <div class="room" id="living-room">Living Room</div>
        <div class="room" id="kitchen">Kitchen</div>
        <div class="room" id="bedroom">Bedroom</div>
        <div class="room" id="bathroom">Bathroom</div>
        <div class="room" id="closet">Closet</div>
    </div>

    .container {
        display: inline-grid;
        grid-template: 40px 40px 40px 40px 40px / 40px 40px 40px 40px 40px;
        background-color: lightblue; 
    }

    .room {
        border: 1px solid;
        font-size: 50%;
        text-align: center;
    }

    #living-room {
        grid-column-start: 1;
        grid-column-end: 6;
        grid-row-start: 1;
        grid-row-end: 3;
    }

    #kitchen {
        grid-column: 4 / 6;
        grid-row: 3 / 6;
    }

    #bedroom {
        grid-column-start: 2;
        grid-column-end: 4;
        grid-row-start: 3;
        grid-row-end: 5;
    }

    #bathroom {
        grid-column-start: 1;
        grid-column-end: 2;
        grid-row-start: 3;
        grid-row-end: 6;
    }

    #closet {
        grid-column-start: 2;
        grid-column-end: 4;
        grid-row-start: 5;
        grid-row-end: 6;
    }


*/

.container-four {
  display: grid;
  grid-template: 40px 40px 40px 40px 40px / 40px 40px 40px 40px 40px;
}

.room {
  display: flex;
  border: 1px solid;
  align-items: center;
  justify-content: center;
  text-align: center;
}

.one {
  grid-column-start: 1;
  grid-column-end: 6;
  grid-row-start: 1;
  grid-row-end: 3;
}

.two {
  grid-column: 4 / 6;
  grid-row: 3 / 6;
}

.three {
  grid-column-start: 2;
  grid-column-end: 4;
  grid-row-start: 3;
  grid-row-end: 5;
}

.four {
  grid-column-start: 1;
  grid-column-end: 2;
  grid-row-start: 3;
  grid-row-end: 6;
}

.five {
  grid-column-start: 2;
  grid-column-end: 4;
  grid-row-start: 5;
  grid-row-end: 6;
}
